a. install android sdk
b. install marshmallow 23.01, 23.02, 23.03; google and intel atom image x64

c. set path:

C:\Users\stislin\AppData\Local\Android\Sdk\platform-tools
C:\Users\stislin\AppData\Local\Android\Sdk\build-tools

and android_home=C:\Users\stislin\AppData\Local\Android\Sdk
android_sdk_home=C:\Users\stislin\AppData\Local\Android\Sdk

 variables;

java_home=C:\java\jdk1.8.0_144

d. create avd

e. start 2 consoles:
1 - react-native start
2 - react-native run-android

================================================================

1. npm install -g react-native-cli
2. npm install -g yarn
3. react-native init rnapp2

=================================================================


1. Clear watchman watches: `watchman watch-del-all`.
2. Delete the `node_modules` folder: `rm -rf node_modules && npm install`
.
3. Reset Metro Bundler cache: `rm -rf /tmp/metro-bundler-cache-*` or `npm
start -- --reset-cache`.  4. Remove haste cache: `rm -rf /tmp/haste-map-re
act-native-packager-*`.

npm start -- --reset-cache

check version: npm list react



delete node_modules, run yarn
remove read-only attribute

react to 16.3.0:
npm install react@16.3.0 --save

downgrade react-navigation to 2.0.0.
npm install react-navigation@2.0.0 --save


=================== Last successful sequence ====================

npm install react-navigation@2.0.0

C:\repo\react-native\rnapp2>npm list react-navigation
rnapp2@0.0.1 C:\repo\react-native\rnapp2
`-- react-navigation@2.0.0

npm install react@16.3.0
npm install react@16.3.1 --save

~~~~~~~~~~~~~~~~~~~~~~~~~~
in package.json:

"react": "^16.3.1",
"react-navigation": "2.0.0"
~~~~~~~~~~~~~~~~~~~~~~~~~~

npm start -- --reset-cache

~~~~~~~~~~~~~~~~~~~~~~~~~~

adb devices
adb shell input keyevent 82


cd android then try to & ./gradlew clean. then & ./gradlew assembleRelease
react-native run-android --variant=release

############ Production release to device on Android ######################################

1. generate key
cd c:\java\jdk****\bin

$ keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000
Place the my-release-key.keystore file under the android/app directory in your project folder.

2.
Edit the file ~/.gradle/gradle.properties or android/gradle.properties

MYAPP_RELEASE_STORE_FILE=my-release-key.keystore
MYAPP_RELEASE_KEY_ALIAS=my-key-alias
MYAPP_RELEASE_STORE_PASSWORD=*****
MYAPP_RELEASE_KEY_PASSWORD=*****

3. edit ./android/app/build.graddle, add signingConfigs:

...
android {
    ...
    defaultConfig { ... }
    signingConfigs {
        release {
                storeFile file(MYAPP_RELEASE_STORE_FILE)
                storePassword MYAPP_RELEASE_STORE_PASSWORD
                keyAlias MYAPP_RELEASE_KEY_ALIAS
                keyPassword MYAPP_RELEASE_KEY_PASSWORD
        }
    }
    buildTypes {
        release {
            ...
            signingConfig signingConfigs.release
        }
    }
}

4. run: react-native run-android --variant=release



############ Production release to device on IOS ######################################

1. install xcode
2. clone git repo

https://facebook.github.io/react-native/docs/getting-started.html

1. install Homebrew
2. brew install node
3. brew install watchman

4. npm install -g react-native-cli

cd react-native/rnapp2
5. npm install
6.

start xcode.
https://blog.ionicframework.com/deploying-to-a-device-without-an-apple-developer-account/
https://facebook.github.io/react-native/docs/running-on-device.html

trust device: Product -> Destination -> device
on device: settings, general, device management, trust certificate






*******************************************************************************************

google cloud:
https://cloud.google.com/kubernetes-engine/docs/quickstart

C:\Google\CloudSDK>gcloud container clusters list
NAME       LOCATION       MASTER_VERSION  MASTER_IP       MACHINE_TYPE   NODE_VERSION  NUM_NODES  STATUS
cluster-1  us-central1-a  1.8.10-gke.0    104.197.251.95  n1-standard-1  1.8.10-gke.0  3          RUNNING

gcloud container clusters get-credentials cluster-1

to config kubectl and access cluster:
gcloud container clusters get-credentials cluster-1 --zone=us-central1-a


kubectl run hello-server --image gcr.io/google-samples/hello-app:1.0 --port 8080
kubectl expose deployment hello-server --type "LoadBalancer"
